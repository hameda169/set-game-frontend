{"version":3,"sources":["helpers/const.js","components/Game.js","components/RoomCreate.js","App.js","serviceWorker.js","index.js"],"names":["address","Card","shape","color","num","fill","onClick","active","width","height","props","cardId","MyShape","rx","ry","className","style","Array","map","_","idx","key","stroke","strokeWidth","Game","message_received","message","console","log","_join","state","name","length","alert","isJoined","socket","emit","room","roomId","_start","isStarted","id","_deal","_challenge","cards","restricted","setState","selected","_cardClicked","includes","filter","x","_joinResult","status","data","userPublicId","userSid","sid","roomName","room_name","_initGame","_challengeResponse","users","_dealResponse","_initSocket","socketIOClient","endpoint","on","nameChanged","event","target","value","match","params","errorMessage","fetch","this","then","r","json","started","rowNumber","colNumber","parseInt","Math","sqrt","myArr","index","slice","marginTop","Button","disabled","onSubmit","display","flex","onChange","placeholder","Object","values","FormText","scores","textAlign","backgroundColor","minHeight","idx1","y","idx2","ac","indexOf","split","t","Component","RoomCreate","goToRoom","history","push","form","document","getElementById","method","body","JSON","stringify","headers","type","App","exact","path","component","Create","strict","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f671483.chunk.js","sourcesContent":["export const address = 'https://game-set.herokuapp.com';\n// export const address = 'http://localhost:5000';\n","import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { Rectangle, Ellipse, Triangle } from 'react-shapes';\nimport { Button, FormText } from 'react-bootstrap';\nimport { address } from '../helpers/const';\n\nfunction Card({ shape, color, num, fill, onClick, active, width, height, ...props }) {\n  const cardId = `${shape}${color}${num}${fill}`;\n  fill = fill === 0 ? '00' : fill === 1 ? '45' : 'cc';\n  color = color === 0 ? '#ff0000' : color === 1 ? '#00aa00' : '#0000ff';\n  num += 1;\n  const MyShape = props => (\n    <div>\n      {shape === 0 && <Triangle {...props} />}\n      {shape === 1 && <Rectangle {...props} />}\n      {shape === 2 && <Ellipse {...props} rx={props.width / 2} ry={props.height / 2} />}\n    </div>\n  );\n  return (\n    <div\n      {...props}\n      className={`game-cards ${active ? 'active' : ''}`}\n      onClick={() => onClick(cardId)}\n      style={{ width: width ? 30 : null, height: height ? 50 : null }}\n    >\n      {[...Array(num)].map((_, idx) => (\n        <MyShape\n          key={`${idx}`}\n          width={!width ? 90 : width}\n          height={!height ? 50 : height}\n          fill={{ color: `${color}${fill}` }}\n          stroke={{ color }}\n          strokeWidth={!height ? 5 : height / 10}\n        />\n      ))}\n      {active && <div className={'my-badge'}>{'âœ“'}</div>}\n    </div>\n  );\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.socket = null;\n    this.roomId = props.match.params.id;\n    this.state = {\n      name: '',\n      endpoint: address,\n      roomName: '',\n      cards: [],\n      selected: [],\n      isJoined: false,\n      isStarted: false,\n      userPublicId: '',\n      userSid: '',\n      restricted: false,\n      errorMessage: null,\n      users: {},\n    };\n  }\n\n  message_received = message => {\n    console.log(message);\n  };\n  _join = () => {\n    if (this.state.name.length < 2) {\n      alert('Please Enter Your Name');\n      return;\n    }\n    if (!this.state.isJoined) {\n      this.socket.emit('join', { name: this.state.name, room: `${this.roomId}` });\n    } else {\n      console.log('You Are joined the room');\n    }\n  };\n  _start = () => {\n    if (!this.state.isStarted) {\n      this.socket.emit('start_room', { id: this.roomId });\n    } else {\n      console.log('Game is started');\n    }\n  };\n  _deal = () => {\n    this.socket.emit('deal', { room: this.roomId });\n  };\n  _challenge = cards => {\n    if (!this.state.restricted && cards.length === 3) {\n      this.socket.emit('challenge', { cards, room: this.roomId });\n    }\n    if (this.state.restricted) {\n      this.setState({ selected: [] });\n      console.log('You are restricted');\n    }\n  };\n  _cardClicked = id => {\n    if (this.state.selected.includes(id)) {\n      this.setState({ selected: [...this.state.selected.filter(x => x !== id)] });\n    } else if (this.state.cards.includes(id)) {\n      this.setState({ selected: [...this.state.selected, id] }, () => this._challenge(this.state.selected));\n    }\n  };\n\n  _joinResult = (status, data) => {\n    console.log('Join', status, data);\n    if (status === 0) {\n      this.setState({ userPublicId: data.id, userSid: data.sid, isJoined: true, roomName: data.room_name });\n      console.log('You joined room successfully');\n    }\n  };\n  _initGame = data => {\n    console.log('Init', data);\n    this.setState({ cards: data.cards, isStarted: true });\n  };\n  _challengeResponse = (status, data) => {\n    console.log('Challenge', status, data);\n    this.setState({ selected: [] });\n    if (status === 0) {\n      this.setState({ cards: [...this.state.cards].filter(x => !data.cards.includes(x)), restricted: false });\n      this.setState({ users: data.users });\n    } else {\n      if (data.id === this.state.userPublicId) {\n        this.setState({ restricted: true });\n      } else {\n        this.setState({ restricted: false });\n      }\n    }\n  };\n  _dealResponse = (status, data) => {\n    if (status === 0) {\n      this.setState({ cards: [...this.state.cards, ...data.cards] });\n    }\n  };\n\n  _initSocket = () => {\n    this.socket = socketIOClient(this.state.endpoint);\n    this.socket.on('message', this.message_received);\n    this.socket.on('join_success', data => this._joinResult(0, data));\n    this.socket.on('init', this._initGame);\n    this.socket.on('challenge_success', data => this._challengeResponse(0, data));\n    this.socket.on('challenge_fail', data => this._challengeResponse(1, data));\n    this.socket.on('deal_success', data => this._dealResponse(0, data));\n    this.socket.on('deal_fail', data => this._dealResponse(1, data));\n  };\n\n  nameChanged = event => {\n    this.setState({ name: event.target.value });\n  };\n  componentDidMount() {\n    fetch(`${this.state.endpoint}/room/${this.roomId}`)\n      .then(r => r.json())\n      .then(r => {\n        console.log(r);\n        if (!r.started) this._initSocket();\n        else this.setState({ errorMessage: 'This room is now started' });\n      });\n  }\n\n  render() {\n    let rowNumber, colNumber;\n    rowNumber = parseInt(Math.sqrt(this.state.cards.length) + 0.9);\n    colNumber = parseInt(Math.sqrt(this.state.cards.length) + 0.9);\n    const myArr = [...Array(rowNumber)].map((value, index) =>\n      this.state.cards.slice(index * colNumber, colNumber * (index + 1)),\n    );\n    return (\n      <div className={'container'}>\n        {this.state.errorMessage && <div className={'row error'}>{this.state.errorMessage}</div>}\n        <div className={'row'}>\n          <div className={'col-sm-3'}>\n            <div className={'col panel'}>\n              <div>\n                {!this.state.isJoined ? (\n                  <form className='form-horizontal' id={'creating'} onSubmit={this._join} style={{ display: 'flex' }}>\n                    <div className='form-group' style={{ flex: 1 }}>\n                      <div>\n                        <input className='form-control' onChange={this.nameChanged} placeholder='Enter Name' />\n                      </div>\n                    </div>\n                    <div className='form-group'>\n                      <div>\n                        <Button onClick={this._join}>Join Room</Button>\n                      </div>\n                    </div>\n                  </form>\n                ) : (\n                  <div style={{ marginTop: 20 }}>\n                    <Button disabled={this.state.isJoined}>Your Name: {this.state.name}</Button>\n                  </div>\n                )}\n              </div>\n              {this.state.isJoined && (\n                <div style={{ marginTop: 20 }}>\n                  <Button disabled={this.state.isJoined}>Room: {this.state.roomName}</Button>\n                </div>\n              )}\n              {this.state.isJoined && (\n                <>\n                  <div style={{ marginTop: 20 }}>\n                    <Button disabled={this.state.isStarted} onClick={this._start}>\n                      {this.state.isStarted ? 'Started' : 'Start Room'}\n                    </Button>\n                  </div>\n                  <div style={{ marginTop: 20 }}>\n                    <Button onClick={this._deal}>New Cards</Button>\n                  </div>\n                  <div style={{ marginTop: 20 }}>\n                    {Object.values(this.state.users).map((x, idx) => (\n                      <FormText key={`${idx}`}>{`${idx + 1}.${x.name}: ${x.scores.length}`}</FormText>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n          <div className={'col-sm-9'}>\n            <div\n              style={{\n                textAlign: 'center',\n                backgroundColor: 'darkseagreen',\n                width: '100%',\n                minHeight: '100vh',\n              }}\n            >\n              {myArr.map((x, idx1) => (\n                <div key={`${idx1}`} className={'cards-row'}>\n                  {x.map((y, idx2) => {\n                    const ac = this.state.selected.indexOf(y) > -1;\n                    y = y.split('').map(t => parseInt(t));\n                    return (\n                      <Card\n                        key={`${idx2}`}\n                        shape={y[0]}\n                        color={y[1]}\n                        num={y[2]}\n                        fill={y[3]}\n                        active={ac}\n                        onClick={this._cardClicked}\n                      />\n                    );\n                  })}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { address } from '../helpers/const';\n\nfunction RoomCreate(props) {\n  const goToRoom = roomId => {\n    props.history.push(`/game/${roomId}`);\n  };\n  const onClick = form => {\n    if (form === 0) {\n      const name = document.getElementById('name').value;\n      fetch(`${address}/room`, {\n        method: 'POST',\n        body: JSON.stringify({ name }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(r => r.json())\n        .then(r => {\n          console.log(r);\n          if (r.type === 'createRoom_success') {\n            goToRoom(r.room.id);\n          }\n        });\n    }\n    if (form === 1) {\n      const id = document.getElementById('id').value;\n      goToRoom(id);\n    }\n  };\n  return (\n    <div className={'container'}>\n      <div className={'row'}>\n        <div className={'col-sm-6'}>\n          <div className={'create'}>\n            <h2>Create Room</h2>\n            <form className='form-horizontal' id={'creating'} onSubmit={() => onClick(0)}>\n              <div className='form-group'>\n                <label className='control-label col-sm-2'>Name:</label>\n                <div className='col-sm-10'>\n                  <input className='form-control' id='name' placeholder='Enter Name' name='name' />\n                </div>\n              </div>\n              <div className='form-group'>\n                <div className='col-sm-offset-2 col-sm-10'>\n                  <Button onClick={() => onClick(0)}>Submit</Button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div className={'col-sm-6'}>\n          <div className={'create'}>\n            <h2>Join Room</h2>\n            <form className='form-horizontal' id={'joining'} onSubmit={() => onClick(1)}>\n              <div className='form-group'>\n                <label className='control-label col-sm-3'>Room Id:</label>\n                <div className='col-sm-10'>\n                  <input className='form-control' id='id' placeholder='Enter Room Id' name='id' />\n                </div>\n              </div>\n              <div className='form-group'>\n                <div className='col-sm-offset-2 col-sm-10'>\n                  <Button onClick={() => onClick(1)}>Submit</Button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RoomCreate;\n","import React from 'react';\nimport { Switch, BrowserRouter, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Game from './components/Game';\nimport Create from './components/RoomCreate';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path={'/'} component={Create} />\n        <Route strict path={'/game/:id'} component={Game} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}